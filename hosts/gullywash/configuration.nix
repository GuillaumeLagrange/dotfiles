# Edit this configuration file to define what should be installed on
# your system. Help is available in the configuration.nix(5) man page, on
# https://search.nixos.org/options and in the NixOS manual (`nixos-help`).

{
  config,
  lib,
  pkgs,
  sshPublicKey,
  ...
}:

{
  imports = [
    # Include the results of the hardware scan.
    ./hardware-configuration.nix
    ./zfs.nix
  ];

  nix.settings.experimental-features = [
    "nix-command"
    "flakes"
    ../common.nix
  ];

  # Bootloader
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.supportedFilesystems = [ "zfs" ];

  networking.hostName = "gullywash";
  networking.networkmanager.enable = true;
  # Necessary for ZFS, value is not important because disks won't be shared across the network
  networking.hostId = "deadbeef";
  networking.enableIPv6 = false;

  networking.firewall = {
    enable = true;
    allowedTCPPorts = [
      80 # HTTP
      443 # HTTPS
    ];
    allowedUDPPorts = [ 51820 ]; # Wireguard tunnel
  };

  # SSH keys for gullywash
  users.users.guillaume.openssh.authorizedKeys.keys = [
    sshPublicKey
    # iOS
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIw2Cng6gQwqvu/81wWMaJUjImeMSrMQH3V/8bAJQtTE Generated By Termius"
  ];

  environment.systemPackages = with pkgs; [
    neovim
    zfs
    smartmontools
    docker-compose
  ];

  # SSH server configuration
  services.openssh = {
    enable = true;
    settings = {
      PasswordAuthentication = false;
      StreamLocalBindUnlink = true;
    };
  };

  programs.gnupg.agent.enable = true;

  # Fail2ban intrusion detection
  services.fail2ban.enable = true;

  services.logrotate = {
    enable = true;
    settings = {
      "/var/log/memory-monitor.log" = {
        size = "2G"; # Rotate when file reaches 2GB
        rotate = 5; # Keep 5 rotated files (5 Ã— 2GB = 10GB total)
        missingok = true; # Don't error if log file is missing
        notifempty = true; # Don't rotate empty files
        create = "644 root root"; # Create new file with these permissions
        copytruncate = true; # Copy file then truncate (safer for running processes)
      };
    };
  };

  virtualisation.containers.enable = true;

  # Config backup service - backup /opt/configs to ZFS daily
  systemd.services.config-backup = {
    description = "Backup configs directory to ZFS";
    serviceConfig = {
      Type = "oneshot";
      User = "root";
      ExecStart = "${pkgs.rsync}/bin/rsync -av --delete /opt/configs/ /configs/";
    };
  };

  systemd.timers.config-backup = {
    description = "Run config backup daily";
    wantedBy = [ "timers.target" ];
    timerConfig = {
      OnCalendar = "daily";
      Persistent = true;
      RandomizedDelaySec = "1h";
    };
  };

  system.stateVersion = "24.11"; # Don't touch this ever
}
